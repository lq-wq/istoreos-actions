name: Build iStoreOS

on:
  workflow_dispatch:
    inputs:
      repo_branch:
        description: '选择编译分支'
        required: true
        type: choice
        options:
          - istoreos-22.03
          - istoreos-24.10
      architecture:
        description: '选择设备架构'
        required: true
        type: choice
        options:
          - x86
          - x86-alpha
      enable_ssh:
        description: '启用SSH调试'
        required: false
        type: boolean
        default: false
  repository_dispatch:
  schedule:
    - cron: '0 16 * * *'

env:
  REPO_URL: https://github.com/istoreos/istoreos
  BUILD_DIR: ${{ github.workspace }}/openwrt
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    steps:
    - name: 验证参数组合
      run: |
        # 分支与架构兼容性检查
        if [[ "${{ inputs.repo_branch }}" == "istoreos-24.10" && "${{ inputs.architecture }}" != "x86-alpha" ]]; then
          echo "❌ 错误组合：24.10版本仅支持x86-alpha架构"
          exit 1
        fi
        if [[ "${{ inputs.repo_branch }}" == "istoreos-22.03" && "${{ inputs.architecture }}" == "x86-alpha" ]]; then
          echo "❌ 错误组合：22.03版本不支持x86-alpha架构"
          exit 1
        fi

    - name: 检出源码
      uses: actions/checkout@v4
      with:
        repository: ${{ env.REPO_URL }}
        ref: ${{ inputs.repo_branch }}
        path: openwrt

    - name: 初始化SSH调试
      if: ${{ inputs.enable_ssh }}
      uses: mxschmitt/action-tmate@v3
      timeout-minutes: 15

    - name: 准备编译环境
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          python3-dev \
          ccache \
          rsync
        ccache --max-size=2G
        echo "CCACHE_DIR=$BUILD_DIR/ccache" >> $GITHUB_ENV

    - name: 加载架构配置
      run: |
        config_dir="configs/${{ inputs.architecture }}"
        if [ ! -d "$config_dir" ]; then
          echo "❌ 缺失配置文件目录: $config_dir"
          exit 1
        fi
        cp -v $config_dir/feeds.conf.default $BUILD_DIR/
        cp -v $config_dir/.config $BUILD_DIR/

    - name: 配置编译缓存
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.BUILD_DIR }}/ccache
          ${{ env.BUILD_DIR }}/dl
        key: ${{ runner.os }}-${{ inputs.architecture }}-${{ hashFiles('configs/' + inputs.architecture + '/*') }}

    - name: 分阶段编译
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        # 阶段1: 准备
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        make defconfig

        # 阶段2: 下载资源
        make download -j$(nproc)
        find dl -size -1M -delete  # 清理小文件

        # 阶段3: 核心编译
        make -j$(nproc) tools/install
        make -j$(nproc) toolchain/install

        # 阶段清理
        find . -name "*.o" -exec rm {} +
        rm -rf tmp/stamp/.toolchain_installed

        # 最终编译
        make -j$(($(nproc)+1)) \
          CONFIG_DEBUG_SECTION_MISMATCH=n \
          CONFIG_SECTION_MISMATCH_WARN_ONLY=y

    - name: 生成固件包
      run: |
        mkdir -p artifacts
        find $BUILD_DIR/bin/targets -name "*.iso" -exec cp {} artifacts/ \;
        echo "编译时间: $(date +"%Y-%m-%d %H:%M:%S")" > artifacts/build-info.txt

    - name: 上传
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.repo_branch }}-${{ inputs.architecture }}
        path: artifacts/
        retention-days: 3

    - name: 自动发布
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ inputs.repo_branch }}-$(date +%Y%m%d%H%M)
        files: artifacts/*
        body: |
          ### 编译信息
          - 架构: ${{ inputs.architecture }}
          - 分支: ${{ inputs.repo_branch }}
          - 编译时间: $(date)

    - name: 清理工作空间
      if: always()
      run: |
        rm -rf $BUILD_DIR/{build_dir,staging_dir,tmp}
        ccache --clear
